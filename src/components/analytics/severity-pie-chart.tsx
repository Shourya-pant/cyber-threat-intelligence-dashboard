
"use client"

import * as React from "react"
import { Pie, PieChart, ResponsiveContainer, Cell, Tooltip, Legend } from "recharts"
import { ChartConfig, ChartContainer, ChartLegendContent, ChartTooltipContent } from "@/components/ui/chart"
import type { ChartData } from "@/types";
import { SEVERITY_LEVELS } from "@/lib/constants";

// Resolved HSL color strings for the dark theme, corresponding to --chart-X variables
const severityColorsResolved: Record<typeof SEVERITY_LEVELS[number], string> = {
  Low: "hsl(130, 65%, 58%)",      // Corresponds to --chart-2 in globals.css .dark
  Medium: "hsl(40, 100%, 60%)",   // Corresponds to --chart-4 in globals.css .dark
  High: "hsl(275, 85%, 70%)",     // Corresponds to --chart-5 in globals.css .dark
  Critical: "hsl(0, 88%, 65%)", // Corresponds to --chart-1 in globals.css .dark
};

interface SeverityPieChartProps {
  data: ChartData[];
}

export function SeverityPieChart({ data }: SeverityPieChartProps) {
   if (!data || data.length === 0) {
    return <p className="text-muted-foreground text-center py-8">No data available for severity distribution.</p>;
  }

  const chartConfig = Object.fromEntries(
    data.map(item => [
      item.name.toLowerCase(), // e.g., "low", "critical"
      {
        label: item.name,
        color: severityColorsResolved[item.name as typeof SEVERITY_LEVELS[number]] // Use resolved HSL strings
      }
    ])
  ) satisfies ChartConfig;

  return (
    <ChartContainer
      config={chartConfig}
      className="mx-auto aspect-square min-h-[300px] max-h-[400px]"
    >
      <ResponsiveContainer width="100%" height="100%">
        <PieChart>
          <Tooltip
            cursor={false}
            content={<ChartTooltipContent hideLabel />}
          />
          <Pie
            data={data}
            dataKey="value"
            nameKey="name"
            innerRadius="40%"
            strokeWidth={3}
            labelLine={false}
            label={({ percent, name }) => `${name}: ${(percent * 100).toFixed(0)}%`}
          >
            {data.map((entry, index) => (
              // Each Cell now uses the CSS variable generated by ChartContainer's ChartStyle,
              // e.g., fill="var(--color-low)" or fill="var(--color-critical)"
              // These vars (--color-low etc.) will be defined by ChartStyle using the resolved HSL strings from chartConfig.
              <Cell key={`cell-${index}`} fill={`var(--color-${entry.name.toLowerCase()})`} />
            ))}
          </Pie>
           <ChartLegendContent nameKey="name" className="text-xs" />
        </PieChart>
      </ResponsiveContainer>
    </ChartContainer>
  )
}

